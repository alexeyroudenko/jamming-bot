services:

  bot:
    build: 
      dockerfile: docker/bot/Dockerfile
    container_name: jamming-bot
    ports:
      - "5005:5005"
      - "5007:5007"
      - "8001:8001"
    env_file:
      - .env      
    volumes:
      - type: bind
        source: ./app/bot
        target: /app
      - type: bind
        source: ./data
        target: /app/data 
    depends_on:
      - redis  
    networks:
      - app_network         

  flask:
    build: 
      dockerfile: docker/flask/Dockerfile
    image: master-image
    container_name: flask
    ports:
      - "5000:5000"
    command: python app.py
    env_file:
      - .env    
    volumes:
      - type: bind
        source: ./app/flask
        target: /app
      - type: bind
        source: ./data
        target: /app/data 
    depends_on:
      - redis
    networks:
      - app_network       

  worker:    
    build: 
      dockerfile: docker/worker/Dockerfile
    image: worker-image
    command: rq worker --name worker --disable-job-desc-logging --url redis://redis:6379/0
    env_file:
      - .env
    volumes:
      - type: bind
        source: ./app/flask
        target: /app
      - type: bind
        source: ./data
        target: /app/data 
    depends_on:
      - redis
    networks:
      - app_network       

  node_red:
    image: "nodered/node-red:latest"
    ports:
      - "1880:1880"
    networks:
      - app_network
    volumes:
      - node_red_data:/data
    environment:
      - NODE_OPTIONS=--max-old-space-size=256
    restart: unless-stopped
  
  spacyapi:
    image: bbieniek/spacyapi:en_v3
    ports:
      - "127.0.0.1:8080:80"
    restart: always
    networks:
      - app_network              

# uncomment to have a another worker
  # worker2:
  #   image: worker-image
  #   command: rq worker --name worker2 --url redis://redis:6379/0
  #   volumes:
  #     - type: bind
  #       source: ./app/flask
  #       target: /app
  #     - type: bind
  #       source: ./data
  #       target: /app/data    
  #   depends_on:
  #     - redis

  nginx:
    container_name: nginx
    restart: "no"
    build:
      context: .
      dockerfile: docker/nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - type: bind
        source: ./data/certbot/www
        target: /var/www/certbot
      - type: bind
        source: ./frontend/build
        target: /var/www                
    depends_on:
      - flask
      - redis
    networks:
      - app_network 

  frontend:
    build: ./frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - app_network 

  redis: 
    image: redislabs/redismod
    container_name: redis
    ports:
      - '6379:6379'
    volumes:
    - /data/redis:/data
    networks:
      - app_network      

volumes:
  node_red_data:
  data:
    external: true
  app:

networks:
  app_network:
    driver: bridge